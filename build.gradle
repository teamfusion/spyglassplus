buildscript { dependencies { classpath 'org.kohsuke:github-api:1.307' } }

plugins {
  id 'architectury-plugin' version '3.4-SNAPSHOT'
  id 'dev.architectury.loom' version '0.12.0-SNAPSHOT' apply false
}

architectury {
  minecraft = rootProject.ver_minecraft
}

subprojects {
  apply plugin: 'dev.architectury.loom'

  loom {
    silentMojangMappingsLicense()
  }

  dependencies {
    minecraft "com.mojang:minecraft:${rootProject.ver_minecraft}"
    mappings "net.fabricmc:yarn:${rootProject.ver_minecraft}+build.${rootProject.ver_yarn}:v2"
  }
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'architectury-plugin'
  apply plugin: 'maven-publish'

  archivesBaseName = project.name == rootProject.name ? rootProject.mod_id : rootProject.mod_id + "-" + project.name
  group = rootProject.maven_group

  def ENV = System.getenv()
  String ver = "${rootProject.version_id}+${rootProject.major_version}"
  version = ENV.GITHUB_ACTIONS ? "${ver}.build.${ENV.GITHUB_RUN_NUMBER}" : ver

  repositories {
    maven {
      name = 'Terraformers'
      url  = 'https://maven.terraformersmc.com/releases/'
    }

    maven {
      name = 'Shedaniel'
      url  = 'https://maven.shedaniel.me/'
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release = 17
  }

  java {
    withSourcesJar()
  }
}

/* Releasing */

def ENV = System.getenv()
def VER_NAME = "[$rootProject.major_version] $rootProject.mod_name $rootProject.version_id"
def CHANGELOG = new File("./gradle", "CHANGELOG.md").text
def SUPPORTED_VERSIONS = rootProject.supported_versions.split(',')
def PLATFORMS = rootProject.enabled_platforms.split(",")

import org.kohsuke.github.*
task github(dependsOn: build) {
  onlyIf { ENV.GITHUB_TOKEN }
  doLast {
    def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN)
    def repository = github.getRepository(rootProject.github_repository)

    def builder = new GHReleaseBuilder(repository, version)
    builder.name(VER_NAME)
    builder.body(CHANGELOG)
    builder.commitish(rootProject.github_branch)
    builder.prerelease(rootProject.beta)

    def release = builder.create()
    for (final def platform in PLATFORMS) {
      release.uploadAsset(
              new File(
                      "./$platform/build/libs",
                      "${archivesBaseName}-${platform}-${version}.jar"
              ),
              "application/java-archive"
      )
    }
  }
}
